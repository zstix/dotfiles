#+TITLE: Emacs Configuraiton
#+AUTHOR: Zack Stickles
#+STARTUP: overview
#+PROPERTY: header-args:emacs-lisp :results none

Emacs configuration using org mode. This is very much a learning process.

* Cheet sheet
  
** Helpful commands

| Command     | Description               |
|-------------+---------------------------|
| ~C-x C-s~   | save file                 |
| ~C-c C-c~   | toggle checkbox           |
| ~C-c C-c~   | evaluate code block       |
| ~C-c C-t~   | toggle todo state         |
| ~C-h f~     | Help for function         |
| ~C-c C-, s~ | Insert source code block  |
| ~M:~        | Evaluate an elisp command |

** Tips and tricks
   - ~:results none~ will precent a result output
   - TAB on a bullet will collapse it
   - SHIFT-TAB on a bullet will collapse everything

* Boilerplate stuff

** Configuration configuraiton
   
Don't ask to run ~emacs-lisp~ code blocks in this file, just do it.

#+begin_src emacs-lisp
(defun my-org-confirm-babel-evaluate (lang body)
  (not (string= lang "emacs-lisp")))
(setq org-confirm-babel-evaluate #'my-org-confirm-babel-evaluate)
#+end_src

** System settings
   
Disable backups, I've never liked this.

#+begin_src emacs-lisp
(setq backup-inhibited t
      make-backup-files nil
      auto-save-default nil)
#+end_src

Use CMD for META on mac.

#+begin_src emacs-lisp
(setq mac-option-key-is-meta nil
      mac-command-key-is-meta t
      mac-command-modifier 'meta
      mac-option-modifier 'none)
#+end_src

Enabling copy / paste outside of Emacs (I'm skeptical if this works).

#+begin_src emacs-lisp
  (setq x-select-enable-clipboard t)
#+end_src

Disable the bell /why/ is this not the default?!

#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
#+end_src

** Packages
   
Setup package repositories and add an easier way to install packages,
if needed.

#+begin_src emacs-lisp
(require 'package)

(add-to-list 'package-archives
             '("melpa" . "http://melpa.org/packages/") t)

(package-initialize)

(when (not package-archive-contents)
  (package-refresh-contents))

(defun my-package-install (pkg)
  (unless (package-installed-p pkg)
    (package-install pkg)))
#+end_src

** Editor
   
Tabs are always 2 spaces! Also have TAB autocomplete first, then
indent as expected. This isn't working the way I'd like it to, so I'll
continue to keep tweaking it.

#+begin_src emacs-lisp
	(setq-default tab-width 2)
	(setq-default standard-indent 2)
	(setq-default electric-indent-inhibit t)

  ;; Never mix tabs and spaces. Never use tabs.
	(setq-default indent-tabs-mode nil)

	(setq backwards-delete-char-untabify-method 'nil)

	(setq c-basic-offset tab-width)
	(setq js-indent-level tab-width)
	(setq css-indent-level tab-width)
#+end_src

** Shell

I (currently) prefer to use ZSH whenever I open a shell

#+begin_src emacs-lisp
(my-package-install 'exec-path-from-shell)
(exec-path-from-shell-initialize)
#+end_src

* UI customization

** General
  
Disable some of the UI elements that I don't need

#+begin_src emacs-lisp
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (setq inhibit-startup-message t)
#+end_src

OneDark theme, gotta have a dark mode. Nice.

#+begin_src emacs-lisp
(my-package-install 'atom-one-dark-theme)
(load-theme 'atom-one-dark t)
#+end_src

Pretty src code blocks in org mode.

#+begin_src emacs-lisp
  (setq org-src-fontify-natively t)
  (custom-set-faces
    '(org-block ((t (:background "#1e1e2a"))))
  )
#+end_src


For now, I have something that reminds me of NerdTree. I think there's
probably a more "emacs way" of handling file stuff that I might explore
in the future.

#+begin_src emacs-lisp
(my-package-install 'neotree)
(global-set-key [f8] 'neotree-toggle)
#+end_src

** Line numbers
   
I've had a surprisingly difficult time getting line numbers to work the way
I want them to. Display line numbers, except in certain major modes.

#+begin_src emacs-lisp
  (setq linum-format "%4d")

  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  (add-hook 'text-mode-hook 'display-line-numbers-mode)
#+end_src

Display the column number in the modeline (why is this not the default?).

#+begin_src emacs-lisp
  (column-number-mode)
#+end_src

** Fonts

#+begin_src emacs-lisp
  (set-face-attribute 'default nil
			  :family "Hack"
			  :height 120
			  :width 'normal
			  :weight 'normal)
        
  (setq-default line-spacing 0.2)
#+end_src

* Terminal emulation + shell

Use a non-terrible terminal emulator.

#+begin_src emacs-lisp
  (my-package-install 'vterm)
#+end_src

** TODO fix colors

* VIM emulation

** Setup

Set up evil mode, which is the main way that emacs becomes usable.

#+begin_src emacs-lisp
  (my-package-install 'evil)
  (my-package-install 'undo-tree)

  (require 'evil)

  (evil-mode 1)
  (global-undo-tree-mode 1)
#+end_src

Better undo functionality.

#+begin_src emacs-lisp
  (evil-set-undo-system 'undo-tree)
#+end_src

** Key bindings

Configure evil mode to operate a little more like vim.

#+begin_src emacs-lisp
  (define-key evil-normal-state-map (kbd "C-u") 'evil-scroll-up)
  (global-set-key (kbd "C-r") 'undo-tree-redo)
#+end_src

Use ~jk~ to exit insert mode escape is too far away and I'm trying to
break the habit of using ~C-c~, since it doesn't play well with visual
block and Emacs.

#+begin_src emacs-lisp
(my-package-install 'evil-escape)
(evil-escape-mode 1)
(setq-default evil-escape-key-sequence "jk")
(setq-default evil-escape-delay 0.2)
#+end_src

** TODO Leader

* Auto completion
  
Completion is mostly handled by company, here we ensure it's loaded in
all bufers.

#+begin_src emacs-lisp
(my-package-install 'company)
(company-mode 1)
(add-hook 'after-init-hook 'global-company-mode)
#+end_src

* Fuzzy finding

** Helm
   
Fuzzy finding all the things is really nice, let's set that up.

#+begin_src emacs-lisp
  (my-package-install 'helm)
  (helm-mode 1)
  (setq helm-completion-style 'helm-fuzzy)
#+end_src

Bind emacs functions to helm and tab to run actions.

#+begin_src emacs-lisp
  (global-set-key (kbd "C-c h") 'helm-command-prefix)
  (global-set-key (kbd "M-x") 'helm-M-x)
  (global-set-key (kbd "C-x C-f") 'helm-find-files)
  (global-set-key (kbd "C-x b") 'helm-mini)

  (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
  (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action)
  (define-key helm-map (kbd "C-z")  'helm-select-action)
#+end_src

Make helm look a little prettier.

#+begin_src emacs-lisp
  (setq helm-autoresize-max-height 0)
  (setq helm-autoresize-min-height 30)
  (helm-autoresize-mode 1)
#+end_src

** Projectile

Use projectile to make it easier to find files in a project.

#+begin_src emacs-lisp
  (my-package-install 'projectile)
  (require 'projectile)
  (projectile-mode 1)
#+end_src

Add the /Silver Searcher/, even though it's not the fastest game in town.

#+begin_src emacs-lisp
  (my-package-install 'ag)
#+end_src

Connect projectile to helm.

#+begin_src emacs-lisp
  (my-package-install 'helm-projectile)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
  (define-key evil-normal-state-map (kbd "C-p") 'helm-projectile-find-file)
#+end_src

* GIT integration

 Git integration is handled by magit.

 #+begin_src emacs-lisp
(my-package-install 'magit)
 #+end_src

Display the diff in the gutter.

#+begin_src emacs-lisp
  (my-package-install 'git-gutter-fringe)
  (git-gutter-mode)

  (setq git-gutter:added-sign " ")
  (setq git-gutter:modified-sign " ")
  (setq git-gutter:deleted-sign " ")

  ;; from atom-one-dark-colors-alist
  (set-face-background 'git-gutter:added "#98C379")
  (set-face-background 'git-gutter:modified "#D19A66")
  (set-face-background 'git-gutter:deleted "#E06C75")
#+end_src
 
* Language-specific configuration

** Javascript

Better mode for JS and JSX stuff.

#+begin_src emacs-lisp
  (my-package-install 'web-mode)

  (add-to-list 'auto-mode-alist '("\\.jsx?$" . web-mode))

  (setq web-mode-markup-indent-offset 2)
#+end_src

Prettier for JS.

#+begin_src emacs-lisp
  (my-package-install 'prettier-js)
  (add-hook 'js-mode-hook 'prettier-js-mode)
#+end_src

Ability to run JS in org mode blocks.

#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((js . t)))
#+end_src

** YAML

#+begin_src emacs-lisp
(my-package-install 'yaml-mode)
#+end_src

** Org

Don't ask to evaluate every time.

#+begin_src emacs-lisp
  (setq org-confirm-babel-evaluate nil
        org-src-fontify-natively t
        org-src-tabs-act-natively t)
#+end_src

* IRC settings

** Setup

What year is it? I don't know, but I still sometimes use IRC. I'm going to
try using ERC to see how it compares to my current client (weechat).

#+begin_src emacs-lisp
  (setq erc-nick "zstix")
  (setq erc-port 6697)
#+end_src

Kill buffers that we no longer need.

#+begin_src emacs-lisp
  (setq erc-kill-buffer-on-part t)
  (setq erc-kill-server-buffer-on-quit t)
#+end_src

** Servers

Easier way to connect to the servers I use.

#+begin_src emacs-lisp
  (defun irc-server-connect (server pass)
    (interactive "sWhat server woudld you like to connect to [libera, snoo]? \nsPassword: ")
    (cond
     ((equal server "libera") (erc-ssl :server "irc.libera.chat" :password pass))
     ((equal server "snoo") (erc-ssl :server "irc.snoonet.org" :password pass))
     (t (message "Server not recognized"))))
#+end_src

Automatically join a few channels for each server.

#+begin_src emacs-lisp
  (setq erc-autojoin-channels-alist
        '(("libera.chat" "#emacs" "#erc" "#security")
          ("snoonet.org" "#portland")))
#+end_src

** UI
   
Some UI customizations to make it a little easeier to use.

#+begin_src emacs-lisp
  (require 'erc-goodies)

  (setq erc-prompt (lambda () (concat (buffer-name) "> ")))

  (erc-scrolltobottom-mode)
  (setq erc-input-line-position -1)

  (setq erc-server-coding-system '(utf-8 . utf-8))
#+end_src

Filter out things I don't need to see.

#+begin_src emacs-lisp
  (setq erc-track-exclude-types
        '("NICK" "JOIN" "PART" "QUIT" "MODE"
          "324" "329" "332" "333" "353" "477"))
#+end_src

Colorize the nicks.

#+begin_src emacs-lisp
  (my-package-install 'erc-hl-nicks)
  (erc-hl-nicks-mode t)
#+end_src

* Email
  
Why the heck not?
