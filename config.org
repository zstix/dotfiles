#+TITLE: Emacs Configuraiton
#+AUTHOR: Zack Stickles

Emacs configuration using org mode. This is very much a learning process.

* Cheet sheet

** Helpful commands

| Command     | Description               |
|-------------+---------------------------|
| ~C-x C-s~   | save file                 |
| ~C-c C-c~   | toggle checkbox           |
| ~C-c C-c~   | evaluate code block       |
| ~C-c C-t~   | toggle todo state         |
| ~C-h f~     | Help for function         |
| ~C-c C-, s~ | Insert source code block  |
| ~M:~        | Evaluate an elisp command |

** Tips and tricks
   - ~:results none~ will precent a result output
   - TAB on a bullet will collapse it
   - SHIFT-TAB on a bullet will collapse everything

* Boilerplate stuff

** Configuration configuraiton
   
Don't ask to run ~emacs-lisp~ code blocks in this file, just do it.

#+begin_src emacs-lisp :results none
(defun my-org-confirm-babel-evaluate (lang body)
  (not (string= lang "emacs-lisp")))
(setq org-confirm-babel-evaluate #'my-org-confirm-babel-evaluate)
#+end_src

** System settings
   
Disable backups, I've never liked this.

#+begin_src emacs-lisp :results none
(setq backup-inhibited t
      make-backup-files nil
      auto-save-default nil)
#+end_src

Use CMD for META on mac.

#+begin_src emacs-lisp :results none
(setq mac-option-key-is-meta nil
      mac-command-key-is-meta t
      mac-command-modifier 'meta
      mac-option-modifier 'none)
#+end_src

Enabling copy / paste outside of Emacs (I'm skeptical if this works).

#+begin_src emacs-lisp :results none
  (setq x-select-enable-clipboard t)
#+end_src

Disable the bell /why/ is this not the default?!

#+begin_src emacs-lisp :results none
  (setq ring-bell-function 'ignore)
#+end_src

"y" / "n" rather than "yes" / "no"

#+begin_src emacs-lisp :results none
	(defalias 'yes-or-no-p 'y-or-no-p)
#+end_src

** Packages
   
Setup package repositories and add an easier way to install packages,
if needed.

#+begin_src emacs-lisp :results none
(require 'package)

(add-to-list 'package-archives
             '("melpa" . "http://melpa.org/packages/") t)

(package-initialize)

(when (not package-archive-contents)
  (package-refresh-contents))

(defun my-package-install (pkg)
  (unless (package-installed-p pkg)
    (package-install pkg)))
#+end_src

** Editor
   
Tabs are always 2 spaces! Also have TAB autocomplete first, then
indent as expected. This isn't working the way I'd like it to, so I'll
continue to keep tweaking it.

#+begin_src emacs-lisp :results none
	(setq-default tab-width 2)
	(setq-default standard-indent 2)
	(setq-default electric-indent-inhibit t)

  ;; Never mix tabs and spaces. Never use tabs.
	(setq-default indent-tabs-mode nil)

	(setq backwards-delete-char-untabify-method 'nil)

	(setq c-basic-offset tab-width)
	(setq js-indent-level tab-width)
	(setq css-indent-level tab-width)
#+end_src

** Shell

I (currently) prefer to use ZSH whenever I open a shell

#+begin_src emacs-lisp :results none
(my-package-install 'exec-path-from-shell)
(exec-path-from-shell-initialize)
#+end_src

* UI customization

** General
  
Disable some of the UI elements that I don't need

#+begin_src emacs-lisp :results none
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (setq inhibit-startup-message t)
#+end_src

OneDark theme, gotta have a dark mode. Nice.

#+begin_src emacs-lisp :results none
(my-package-install 'atom-one-dark-theme)
(load-theme 'atom-one-dark t)
#+end_src

Pretty src code blocks in org mode.

#+begin_src emacs-lisp :results none
  (setq org-src-fontify-natively t)
  (custom-set-faces
    '(org-block ((t (:background "#1e1e2a"))))
  )
#+end_src


For now, I have something that reminds me of NerdTree. I think there's
probably a more "emacs way" of handling file stuff that I might explore
in the future.

#+begin_src emacs-lisp :results none
(my-package-install 'neotree)
(global-set-key [f8] 'neotree-toggle)
#+end_src

Better undo functionality.

#+begin_src emacs-lisp :results none
  (my-package-install 'undo-tree)
  (global-undo-tree-mode 1)
  (global-set-key (kbd "C-r") 'undo-tree-redo)
#+end_src

** Line numbers
   
I've had a surprisingly difficult time getting line numbers to work the way
I want them to. Display line numbers, except in certain major modes.

#+begin_src emacs-lisp :results none
  (setq linum-format "%4d")

  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  (add-hook 'text-mode-hook 'display-line-numbers-mode)
#+end_src

Display the column number in the modeline (why is this not the default?).

#+begin_src emacs-lisp :results none
  (column-number-mode)
#+end_src

** Fonts

#+begin_src emacs-lisp :results none
  (set-face-attribute 'default nil
			  :family "SauceCodePro Nerd Font Mono"
			  :height 110
			  :width 'normal
			  :weight 'normal)
  (if (eq system-type 'darwin)
    (set-face-attribute 'default nil
			  :family "SauceCodePro Nerd Font"
			  :height 130
			  :width 'normal
			  :weight 'normal))
#+end_src

* Terminal emulation + shell

Use a non-terrible terminal emulator.

#+begin_src emacs-lisp :results none
  (my-package-install 'vterm)
#+end_src

* VIM emulation

** TODO [2/3]
   - [X] evil mode
   - [X] jk to exit insert mode
   - [ ] leader key

Set up evil mode, which is the main way that emacs becomes usable.

#+begin_src emacs-lisp :results none
  (my-package-install 'evil)
  (require 'evil)
  (evil-mode 1)

  (setq-default evil-undo-system 'undo-tree)
#+end_src

Configure evil mode to operate a little more like vim.

#+begin_src emacs-lisp :results none
  (define-key evil-normal-state-map (kbd "C-u") 'evil-scroll-up)
#+end_src

Use ~jk~ to exit insert mode escape is too far away and I'm trying to
break the habit of using ~C-c~, since it doesn't play well with visual
block and Emacs.

#+begin_src emacs-lisp :results none
(my-package-install 'evil-escape)
(evil-escape-mode 1)
(setq-default evil-escape-key-sequence "jk")
(setq-default evil-escape-delay 0.2)
#+end_src

* Auto completion
  
Completion is mostly handled by company, here we ensure it's loaded in
all bufers.

#+begin_src emacs-lisp :results none
(my-package-install 'company)
(company-mode 1)
(add-hook 'after-init-hook 'global-company-mode)
#+end_src

* Helm

Fuzzy finding all the things is really nice, let's set that up.

#+begin_src emacs-lisp :results none
  (my-package-install 'helm)
  (helm-mode 1)
#+end_src

Bind emacs functions to helm and tab to run actions.

#+begin_src emacs-lisp :results none
  (global-set-key (kbd "C-c h") 'helm-command-prefix)
  (global-set-key (kbd "M-x") 'helm-M-x)
  (global-set-key (kbd "C-x C-f") 'helm-find-files)
  (global-set-key (kbd "C-x b") 'helm-mini)

  (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
  (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action)
  (define-key helm-map (kbd "C-z")  'helm-select-action)
#+end_src

Make helm look a little prettier.

#+begin_src emacs-lisp :results none
  (setq helm-autoresize-max-height 0)
  (setq helm-autoresize-min-height 30)
  (helm-autoresize-mode 1)
#+end_src

* GIT integration

 Git integration is handled by magit.

 #+begin_src emacs-lisp :results none
(my-package-install 'magit)
 #+end_src
 
* Language-specific configuration

Setup YAML

#+begin_src emacs-lisp :results none
(my-package-install 'yaml-mode)
#+end_src

* IRC settings

What year is it? I don't know, but I still sometimes use IRC. I'm going to
try using ERC to see how it compares to my current client (weechat).

#+begin_src emacs-lisp :results none
  (setq erc-nick "zstix")

  ;; NOTE: this isn't working yet
  (defun irc-libera-chat () (lambda ()
                              (interactive)
                              (erc :server "irc.libera.chat"
                                   :port "6697")))
#+end_src

Kill buffers that we no longer need.

#+begin_src emacs-lisp :results none
  (setq erc-kill-buffer-on-part t)
  (setq erc-kill-server-buffer-on-quit t)
#+end_src

Some UI customizations to make it a little easeier to use.

#+begin_src emacs-lisp :results none
  (setq erc-prompt (lambda () (concat (buffer-name) "> ")))

  (erc-scrolltobottom-mode t)
  (setq erc-input-line-position -1)
#+end_src
